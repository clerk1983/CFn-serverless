AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CloudFormation Template for a web application with S3, API Gateway, Lambda, and DynamoDB.

Resources:
  # S3 Bucket for hosting the static website
  FrontEndBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-frontend-s3-${AWS::Region}-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # BucketPolicy for the S3 bucket to allow public access
  FrontEndBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontEndBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${FrontEndBucket}/*"

  # API Gateway
  BackendFunctionApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      Description: "API Gateway for the backend functions"
      FailOnWarnings: true
      MinimumCompressionSize: 0

  ApiResourceGames:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt BackendFunctionApi.RootResourceId
      PathPart: games
      RestApiId: !Ref BackendFunctionApi

  ApiResourceGameTurns:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiResourceGames
      PathPart: turns
      RestApiId: !Ref BackendFunctionApi

  ApiResourceGameTurn:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiResourceGameTurns
      PathPart: "{turnCount}"
      RestApiId: !Ref BackendFunctionApi

  ApiMethodGamesPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiResourceGames
      RestApiId: !Ref BackendFunctionApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GamesPostFunction.Arn}/invocations"

  ApiMethodGameTurnsPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiResourceGameTurns
      RestApiId: !Ref BackendFunctionApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GamesTurnsPostFunction.Arn}/invocations"

  ApiMethodGameTurnGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiResourceGameTurn
      RestApiId: !Ref BackendFunctionApi
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GamesTurnsGetFunction.Arn}/invocations"

  # IAM role for Lambda functions with necessary permissions for DynamoDB access
  BackendFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/rvs-*"

  GamesPostFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Code:
        S3Bucket: your-s3-bucket-name
        S3Key: path/to/your/deployment-package.zip
      Role: !GetAtt BackendFunctionExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME_GAMES: !Ref GamesTable
          TABLE_NAME_TURNS: !Ref TurnsTable
          TABLE_NAME_SQUARE: !Ref SquareTable

  GamesTurnsGetFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Code:
        S3Bucket: your-s3-bucket-name
        S3Key: path/to/your/deployment-package.zip
      Role: !GetAtt BackendFunctionExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME_GAMES: !Ref GamesTable
          TABLE_NAME_TURNS: !Ref TurnsTable
          TABLE_NAME_SQUARE: !Ref SquareTable

  GamesTurnsPostFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Code:
        S3Bucket: your-s3-bucket-name
        S3Key: path/to/your/deployment-package.zip
      Role: !GetAtt BackendFunctionExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME_GAMES: !Ref GamesTable
          TABLE_NAME_TURNS: !Ref TurnsTable
          TABLE_NAME_SQUARE: !Ref SquareTable

  GamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "rvs-games"
      AttributeDefinitions:
        - AttributeName: "game_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "game_id"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  TurnsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "rvs-turns"
      AttributeDefinitions:
        - AttributeName: "game_id"
          AttributeType: "S"
        - AttributeName: "turn_count"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "game_id"
          KeyType: "HASH"
        - AttributeName: "turn_count"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  SquareTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "rvs-square"
      AttributeDefinitions:
        - AttributeName: "turn_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "turn_id"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

Outputs:
  # Output the URL of the static website hosted in S3
  WebsiteURL:
    Value: !Sub "http://${FrontEndBucket}.s3-website-${AWS::Region}.amazonaws.com/"
    Description: URL for the static my website

  # Output the endpoint URL for the API Gateway
  ApiEndpoint:
    Value: !Sub "https://${BackendFunctionApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Description: API Gateway endpoint URL
